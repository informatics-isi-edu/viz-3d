#!/usr/bin/python3

from viz_3d.volumes.vtk_util import VtkUtil
from viz_3d.volumes.deriva_3d_util import Deriva3DUtil
from deriva.core import BaseCLI
import argparse
import json
import traceback
import sys
import signal
import logging
import time
from logging.handlers import SysLogHandler
from pathlib import Path
import os

logger = logging.getLogger('process-3d-images')
formatter = logging.Formatter('%(name)s: %(message)s')
handler = SysLogHandler(address='/dev/log', facility=SysLogHandler.LOG_LOCAL1)
handler.setFormatter(formatter)
logger.addHandler(handler)
logger.setLevel(logging.INFO)
lockfile = None

def main(host, catalog_id, schema_name, table_name, target_voxel_count, status,
         rids, scratch_directory, throttle):
    if throttle:
        acquire_lock()
    du = Deriva3DUtil(host, schema_name, table_name, catalog_id)
    rids = set(rids)
    if len(rids) == 0:
        status = status if status else 'new'
    if status:
        rids = rids.union(set(du.get_rids_with_status(status)))
        for sig in [signal.SIGTERM, signal.SIGINT, signal.SIGABRT,
                    signal.SIGSEGV, signal.SIGBUS, signal.SIGQUIT, signal.SIGIO]:
            signal.signal(sig, signal_handler)

    for rid in rids:
        try:
            process_one_image(rid, du, target_voxel_count, scratch_directory)
        except Exception as ex:
            logger.error(traceback.format_exc())
            du.update_status(rid, 'error', ex)

    release_lock()

def acquire_lock():
    lockfile = Path('/var/lock/3d-processing') / 'lock'
    if lockfile.exists() and lockfile.stat().st_size > 0:
        lockpid=lockfile.read_text()
        if (Path('/proc') / lockpid).exists():
            logger.warning('Throttled process already running, exiting')
            sys.exit(0)
    lockfile.open('w')
    lockfile.write_text(str(os.getpid()))
    locked = True

def release_lock():
    if lockfile:
        lockfile.unlink(missing_ok=True)
        
def signal_handler(sig, frame=None):
    release_lock()
    raise InterruptedError('got signal {sig}'.format(sig=signal.strsignal(sig)))


def process_one_image(rid, du, target_voxel_count, scratch_directory):
    logger.info('processing RID {r}'.format(r=rid))
    start_time = time.time()
    du.update_status(rid, 'in progress')
    file_info = du.rid_to_file_info(rid)
    vu = VtkUtil(du.host, file_info['source_file_url'],
                 file_info['source_file_name'], rid, scratch_directory)
    reader = vu.archive_to_vti_reader()
    fraction = vu.find_best_size(target_voxel_count)
    resized_file_info = vu.resize_and_write(fraction)
    resized_file_info['processing_start_time'] = time.ctime(start_time)
    resized_file_info['processing_seconds'] = int(time.time() - start_time + .5)
    du.upload_processed_file(rid, resized_file_info)
    du.update_status(rid, 'success')
    vu.clean_scratch_files()

if __name__ == '__main__':

    cli = BaseCLI("""Process one or more volumetric 3D images for use with VTK.
    Query information about source images, create converted/downsampled files,
    upload them to and register them in deriva.""", None, 1, hostname_required=True)
    cli.parser.add_argument('--target-voxel-count', type=int, default=60000000,
                            help='target size (in voxels) for downsampled file')
    cli.parser.add_argument('--status', default=None,
                            help='process records with this processing status')
    cli.parser.add_argument('--scratch', default='/var/scratch/viz-3d',
                            help='scratch directory for raw and processed files')
    cli.parser.add_argument('--catalog-id', type=int, default=1)
    cli.parser.add_argument('--throttle', default=False, action='store_true',
                            help='allow only one throttled process to run as this user at a time')
    cli.parser.add_argument('schema', default=None,
                            help='schema of table containing raw 3D images')
    cli.parser.add_argument('table', default=None,
                            help='name of table containing raw 3D images')
    cli.parser.add_argument('rid', nargs='*', default=None,
                            help='process records with this/these RID(s)')
    args = cli.parse_cli()
    main(args.host, args.catalog_id, args.schema, args.table, args.target_voxel_count,
         args.status, args.rid, args.scratch, args.throttle)
